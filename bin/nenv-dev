#!/usr/bin/env node

require('source-map-support/register')

const { resolve, join } = require('path')
const parseArgs = require('minimist')
const { existsSync, readFileSync } = require('fs')
const Server = require('../server')
const { printAndExit } = require('../lib/utils')
const pkgUp = require('pkg-up')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help',
    H: 'hostname',
    p: 'port'
  },
  boolean: ['h'],
  string: ['H'],
  default: { p: 8808 }
})

if (argv.help) {
  console.log(`
    Description
      Starts the application in development mode (hot-code reloading, error
      reporting, etc)
    Usage
      nenv dev <dir> -p <port number>
    <dir> represents where the compiled folder should go
    If no directory is provided, the folder will be created in current directory.
    You can set a custom folder in config

    Options
      --port, -p A port number on thich to start the application
      --hostname, -H Hostname on which to start the application
      --help, -h Display this message
  `)
  process.exit(0)
}

const dir = resolve(argv._[0] || '.')

if (!existsSync(dir)) {
  printAndExit(`> No such directory exists as the project root: ${dir}`)
}

if (!existsSync(join(dir, 'pages'))) {
  if (existsSync(join(dir, '..', 'pages'))) {
    printAndExit('> No `pages` directory found. Did you mean to run `nenv` in parent (`../`) directory?')
  }

  printAndExit('> Couldn\'t find a `pages directory. Please create one under the project root')
}

const srv = new Server({dir, dev: true})
srv.start(argv.port, argv.hostname)
.then(() => {
  console.log(`> Ready on http://${argv.hostname ? argv.hostname : 'localhost'}:${argv.port}`)
})
.catch((err) => {
  if (err.code === 'EADDRINUSE') {
    let errorMessage = `Port ${argv.port} is already in use.`
    const pkgAppPath = pkgUp.sync('.')
    const appPackage = JSON.parse(readFileSync(pkgAppPath, 'utf8'))
    const nenvScript = Object.entries(appPackage.scripts).find(scriptLine => scriptLine[1] === 'nenv')
    if (nenvScript) errorMessage += `\nUse \`npm run ${nenvScript[0]} -- -p <some other port>\`.`
    console.error(errorMessage)
  } else {
    console.log(err)
  }
  process.nextTick(() => process.exit(1))
})
